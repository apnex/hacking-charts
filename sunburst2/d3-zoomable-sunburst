<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
<meta name="google-site-verification" content="Cb1i2q7oVgeeYvCfXyzou6YrKo5cPOGleoeIojAGqLM" />
<meta name="description" content="D3 Zoomable Sunburst This variant of a sunburst diagram, a radial orientation of D3&#x2019;s hierarchical partition layout, sho"><meta name="twitter:card" content="summary_large_image">
<meta property="og:title" content="D3 Zoomable Sunburst">
<meta property="og:description" content="An Observable notebook by Mike Bostock.">
<meta property="og:image" content="https://static.observableusercontent.com/thumbnail/c41490ac96d4c580d9905b27e54660e1b2aca1917af2a8a91b916795760dc8f1.jpg">
<link rel="prefetch" href="https://static.observableusercontent.com/worker/worker.676d9eec9c4e377a0dec454eac39eaed69a7c3c488ef2cc8ecb954551f8dc0eb.css">
<link rel="prefetch" href="https://static.observableusercontent.com/worker/worker.6257841301f9ded022c9b58fa57227d7a7b6c7aa9cd35a3b3f62100b54b51d6d.js">
<link rel="prefetch" href="https://cdn.jsdelivr.net/npm/marked@0.3.12/marked.min.js">

<title>D3 Zoomable Sunburst / Observable</title>
<link rel="stylesheet" type="text/css" href="https://static.observablehq.com/style.dafd4eea2e1ba24d11c8897af0d5de8db149ad122cfd3f4687b4dbe844d2f952.css">
<link rel="apple-touch-icon" href="https://static.observablehq.com/favicon-512.e994d8ef78e387a9715cc1aab4dfdbc250bf565186e1165a931b055d1e02e84d.png">
<link rel="icon" type="image/png" href="https://static.observablehq.com/favicon-512.e994d8ef78e387a9715cc1aab4dfdbc250bf565186e1165a931b055d1e02e84d.png" sizes="512x512">
<link rel="search" type="application/opensearchdescription+xml" href="https://static.observablehq.com/opensearch.17954acae039c23392ee148792c1aab1a453de807cd92bed4a31ba0a1a289db2.xml" title="Observable search">
</head>
<body class="sans-serif bg-near-white">
<div id="app" csrf-token="6c1f631b04cd363ae9bc5ba38bf57cf7"></div>
<div class="modal"></div>
<div class="overlay" class="absolute top-0 left-0"></div>


<script src="https://static.observablehq.com/bundle.1abd574cc63a4ec75cfc41686d47a15794e81d02f62fa0441ff171c0425625eb.js" crossorigin></script>
<script async src="https://www.google-analytics.com/analytics.js"></script><script type="application/ld+json">{"@context":"http:\/\/schema.org","@type":"Article","mainEntityOfPage":{"@type":"WebPage","@id":"https:\/\/beta.observablehq.com\/@mbostock\/d3-zoomable-sunburst"},"headline":"D3 Zoomable Sunburst","image":["https:\/\/static.observableusercontent.com\/thumbnail\/c41490ac96d4c580d9905b27e54660e1b2aca1917af2a8a91b916795760dc8f1.jpg"],"datePublished":"2018-04-30T17:36:45.704Z","dateModified":"2018-04-30T17:36:45.704Z","author":{"@type":"Person","name":"Mike Bostock"},"publisher":{"@type":"Organization","name":"Observable","logo":{"@type":"ImageObject","url":"https:\/\/static.observablehq.com\/favicon-512.e994d8ef78e387a9715cc1aab4dfdbc250bf565186e1165a931b055d1e02e84d.png"}}}</script><noscript><p>D3 Zoomable Sunburst This variant of a sunburst diagram, a radial orientation of D3’s hierarchical partition layout, shows only two layers of the Flare visualization toolkit package hierarchy at a time. Click a node to zoom in, or click the center to zoom out.</p>
<pre>chart = {
  const root = partition(data);

  root.each(d =&gt; d.current = d);

  const svg = d3.select(DOM.svg(width, width))
      .style(&quot;width&quot;, &quot;100%&quot;)
      .style(&quot;height&quot;, &quot;auto&quot;)
      .style(&quot;font&quot;, &quot;10px sans-serif&quot;);

  const g = svg.append(&quot;g&quot;)
      .attr(&quot;transform&quot;, &#x60;translate(${width / 2},${width / 2})&#x60;);

  const path = g.append(&quot;g&quot;)
    .selectAll(&quot;path&quot;)
    .data(root.descendants().slice(1))
    .enter().append(&quot;path&quot;)
      .attr(&quot;fill&quot;, d =&gt; { while (d.depth &gt; 1) d = d.parent; return color(d.data.name); })
      .attr(&quot;fill-opacity&quot;, d =&gt; arcVisible(d.current) ? (d.children ? 0.6 : 0.4) : 0)
      .attr(&quot;d&quot;, d =&gt; arc(d.current));

  path.filter(d =&gt; d.children)
      .style(&quot;cursor&quot;, &quot;pointer&quot;)
      .on(&quot;click&quot;, clicked);

  path.append(&quot;title&quot;)
      .text(d =&gt; &#x60;${d.ancestors().map(d =&gt; d.data.name).reverse().join(&quot;/&quot;)}\n${format(d.value)}&#x60;);

  const label = g.append(&quot;g&quot;)
      .attr(&quot;pointer-events&quot;, &quot;none&quot;)
      .attr(&quot;text-anchor&quot;, &quot;middle&quot;)
      .style(&quot;user-select&quot;, &quot;none&quot;)
    .selectAll(&quot;text&quot;)
    .data(root.descendants().slice(1))
    .enter().append(&quot;text&quot;)
      .attr(&quot;dy&quot;, &quot;0.35em&quot;)
      .attr(&quot;fill-opacity&quot;, d =&gt; +labelVisible(d.current))
      .attr(&quot;transform&quot;, d =&gt; labelTransform(d.current))
      .text(d =&gt; d.data.name);

  const parent = g.append(&quot;circle&quot;)
      .datum(root)
      .attr(&quot;r&quot;, radius)
      .attr(&quot;fill&quot;, &quot;none&quot;)
      .attr(&quot;pointer-events&quot;, &quot;all&quot;)
      .on(&quot;click&quot;, clicked);

  function clicked(p) {
    parent.datum(p.parent || root);

    root.each(d =&gt; d.target = {
      x0: Math.max(0, Math.min(1, (d.x0 - p.x0) / (p.x1 - p.x0))) * 2 * Math.PI,
      x1: Math.max(0, Math.min(1, (d.x1 - p.x0) / (p.x1 - p.x0))) * 2 * Math.PI,
      y0: Math.max(0, d.y0 - p.depth),
      y1: Math.max(0, d.y1 - p.depth)
    });

    const t = g.transition().duration(750);

    // Transition the data on all arcs, even the ones that aren’t visible,
    // so that if this transition is interrupted, entering arcs will start
    // the next transition from the desired position.
    path.transition(t)
        .tween(&quot;data&quot;, d =&gt; {
          const i = d3.interpolate(d.current, d.target);
          return t =&gt; d.current = i(t);
        })
      .filter(function(d) {
        return +this.getAttribute(&quot;fill-opacity&quot;) || arcVisible(d.target);
      })
        .attr(&quot;fill-opacity&quot;, d =&gt; arcVisible(d.target) ? (d.children ? 0.6 : 0.4) : 0)
        .attrTween(&quot;d&quot;, d =&gt; () =&gt; arc(d.current));

    label.filter(function(d) {
        return +this.getAttribute(&quot;fill-opacity&quot;) || labelVisible(d.target);
      }).transition(t)
        .attr(&quot;fill-opacity&quot;, d =&gt; +labelVisible(d.target))
        .attrTween(&quot;transform&quot;, d =&gt; () =&gt; labelTransform(d.current));
  }
  
  function arcVisible(d) {
    return d.y1 &lt;= 3 &amp;&amp; d.y0 &gt;= 1 &amp;&amp; d.x1 &gt; d.x0;
  }

  function labelVisible(d) {
    return d.y1 &lt;= 3 &amp;&amp; d.y0 &gt;= 1 &amp;&amp; (d.y1 - d.y0) * (d.x1 - d.x0) &gt; 0.03;
  }

  function labelTransform(d) {
    const x = (d.x0 + d.x1) / 2 * 180 / Math.PI;
    const y = (d.y0 + d.y1) / 2 * radius;
    return &#x60;rotate(${x - 90}) translate(${y},0) rotate(${x &lt; 180 ? 0 : 180})&#x60;;
  }

  return svg.node();
}</pre>
<pre>data = require(&quot;@observablehq/flare&quot;)</pre>
<pre>partition = data =&gt; {
  const root = d3.hierarchy(data)
      .sum(d =&gt; d.size)
      .sort((a, b) =&gt; b.value - a.value);
  return d3.partition()
      .size([2 * Math.PI, root.height + 1])
    (root);
}</pre>
<pre>color = d3.scaleOrdinal().range(d3.quantize(d3.interpolateRainbow, data.children.length + 1))</pre>
<pre>format = d3.format(&quot;,d&quot;)</pre>
<pre>width = 932</pre>
<pre>radius = width / 6</pre>
<pre>arc = d3.arc()
    .startAngle(d =&gt; d.x0)
    .endAngle(d =&gt; d.x1)
    .padAngle(d =&gt; Math.min((d.x1 - d.x0) / 2, 0.005))
    .padRadius(radius * 1.5)
    .innerRadius(d =&gt; d.y0 * radius)
    .outerRadius(d =&gt; Math.max(d.y0 * radius, d.y1 * radius - 1))</pre>
<pre>d3 = require(&quot;d3@5&quot;)</pre></noscript>